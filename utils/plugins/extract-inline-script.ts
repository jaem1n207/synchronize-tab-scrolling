import type { PluginOption } from 'vite';

import colorLog from '../log';
import { PLATFORM, getBuildDir } from '../paths';
import { readFile, writeFile } from '../utils';

const hash = (...values: string[]) => {
  let hash = 5381;

  for (const value of values) {
    let i = value.length;
    while (i) hash = (hash * 33) ^ value.charCodeAt(--i);
  }

  return (hash >>> 0).toString(36);
};

const transformContent = (content: string) => {
  return content
    .replace('__sveltekit', 'const __sveltekit')
    .replace('document.currentScript.parentElement', 'document.body.firstElementChild');
};

/**
 * In Manifest V3, inline scripts are not allowed by the content security policy.
 *
 * Extract the inline script in the `html` file of the file generated by the `@sveltejs/adapter-static` adapter to a file named
 * `[name].{hash}.[ext]` file and paste the extracted script into the `html` file.
 */
const extractInlineScript = async ({
  debug,
  platforms
}: {
  debug: boolean;
  platforms: PLATFORM[];
}): Promise<PluginOption> => {
  const extractInlineScriptForPlatform = async (
    platform: PLATFORM,
    scriptRegex: RegExp,
    getFilename: (hash: string) => string,
    getScriptTag: (filename: string) => string
  ) => {
    const platformBuildDir = getBuildDir({ debug, platform });
    const htmlFilePath = `${platformBuildDir}/index.html`;

    if (await readFile(htmlFilePath)) {
      const f = await readFile(htmlFilePath);
      const scriptMatch = f.match(scriptRegex);

      if (scriptMatch) {
        let inlineContent = scriptMatch[1];
        inlineContent = transformContent(inlineContent);
        const scriptHash = hash(inlineContent);
        const scriptFilename = getFilename(scriptHash);
        const scriptTag = getScriptTag(scriptFilename);
        const newHtml = f.replace(scriptRegex, scriptTag);

        await writeFile(`${platformBuildDir}/${scriptFilename}`, inlineContent);
        await writeFile(htmlFilePath, newHtml);
      }
    }
  };

  return {
    name: 'extract-inline-script',
    async closeBundle() {
      for (const platform of platforms) {
        await extractInlineScriptForPlatform(
          platform,
          /<script nonce="%sveltekit.nonce%">([\s\S]*?)<\/script>/,
          (hash) => `color-scheme-script.${hash}.js`,
          (filename) => `<script nonce="%sveltekit.nonce%" src='${filename}'></script>`
        );
        await extractInlineScriptForPlatform(
          platform,
          /<script>([\s\S]+)<\/script>/,
          (hash) => `script-${hash}.js`,
          (filename) => `<script type="module" src="${filename}"></script>`
        );
      }
      colorLog('ðŸ“¦ Inline scripts extracted and saved for each platform', 'success', true);
    }
  };
};

export default extractInlineScript;
