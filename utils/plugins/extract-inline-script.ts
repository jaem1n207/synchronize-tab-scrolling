import type { PluginOption } from 'vite';

import { rootPath } from '../paths';
import { getPaths, measureTime, readFile, writeFile } from '../utils';

//
const buildDir = rootPath('build');

const hash = (...values: string[]) => {
  let hash = 5381;

  for (const value of values) {
    let i = value.length;
    while (i) hash = (hash * 33) ^ value.charCodeAt(--i);
  }

  return (hash >>> 0).toString(36);
};

const transformContent = (content: string) => {
  return content
    .replace('__sveltekit', 'const __sveltekit')
    .replace('document.currentScript.parentElement', 'document.body.firstElementChild');
};

/**
 * In Manifest V3, inline scripts are not allowed by the content security policy.
 *
 * Extract the inline script in the `html` file of the file generated by the `@sveltejs/adapter-static` adapter to a file named
 * `[name].{hash}.[ext]` file and paste the extracted script into the `html` file.
 */
const extractInlineScript = async (): Promise<PluginOption> => {
  const extractInlineScript = async (
    to: string,
    scriptRegex: RegExp,
    getFilename: (hash: string) => string,
    getScriptTag: (filename: string) => string
  ) => {
    const htmlFiles = await getPaths(`${buildDir}/**/*.html`);

    for (const file of htmlFiles) {
      const f = await readFile(file);
      const scriptMatch = f.match(scriptRegex);

      if (scriptMatch) {
        let inlineContent = scriptMatch[1];
        inlineContent = transformContent(inlineContent);
        const scriptHash = hash(inlineContent);
        const scriptFilename = getFilename(scriptHash);
        const scriptTag = getScriptTag(scriptFilename);
        const newHtml = f.replace(scriptRegex, scriptTag);

        await writeFile(file, newHtml);
        await writeFile(`${to}${scriptFilename}`, inlineContent);
      }
    }
  };

  return {
    name: 'extract-inline-script',
    async closeBundle() {
      await measureTime(
        (async () => {
          await extractInlineScript(
            buildDir,
            /<script nonce="%sveltekit.nonce%">([\s\S]*?)<\/script>/,
            (hash) => `/color-scheme-script.${hash}.js`,
            (filename) => `<script nonce="%sveltekit.nonce%" src='${filename}'></script>`
          );
          await extractInlineScript(
            buildDir,
            /<script>([\s\S]+)<\/script>/,
            (hash) => `/script-${hash}.js`,
            (filename) => `<script type="module" src="${filename}"></script>`
          );
        })(),
        'ðŸ“¦ Inline scripts extracted and saved'
      );
    }
  };
};

export default extractInlineScript;
