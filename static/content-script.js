var y=(p,E)=>{let F;const j=()=>{clearTimeout(F)};return(...x)=>{j(),F=setTimeout(()=>{F=void 0,p(...x)},E)}},z=(p,E)=>{let F=0;return(...j)=>{const k=(new Date()).getTime();if(k-F<E)return;return F=k,p(...j)}},T=!1,A=y(()=>{T=!1,console.debug("Scrolling reset to",T)},250),v=z(()=>{try{if(console.debug("Scroll event triggered"),T)return;const E=(window.scrollY||document.documentElement.scrollTop||document.body.scrollTop||0)/document.documentElement.scrollHeight;console.debug("Scroll event triggered, sending syncScroll message with percentage:",E),chrome.runtime.sendMessage({command:"syncScroll",data:{scrollYPercentage:E}})}catch(p){console.error(`Error in onScrollHandler: ${p}`)}},50);chrome.runtime.onMessage.addListener((p)=>{if(p.command==="startSyncTab")console.debug("Content script loaded for tab",p.data),window.addEventListener("scroll",v),console.debug("Scroll event listener registered");if(p.command==="stopSyncTab")window.removeEventListener("scroll",v);if(p.command==="syncScrollForTab"){T=!0,console.debug("Received syncScrollForTab message with data",p.data);const{scrollYPercentage:E}=p.data,F=E*document.documentElement.scrollHeight;window.scrollTo({top:F,behavior:"instant"}),A()}});export{z as throttle,y as debounce};
